// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/seckill.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SeckillService_CreateSeckill_FullMethodName      = "/proto.SeckillService/CreateSeckill"
	SeckillService_GetSeckill_FullMethodName         = "/proto.SeckillService/GetSeckill"
	SeckillService_JoinSeckill_FullMethodName        = "/proto.SeckillService/JoinSeckill"
	SeckillService_InquireSeckill_FullMethodName     = "/proto.SeckillService/InquireSeckill"
	SeckillService_CheckSeckillResult_FullMethodName = "/proto.SeckillService/CheckSeckillResult"
)

// SeckillServiceClient is the client API for SeckillService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeckillServiceClient interface {
	// 创建秒杀活动
	CreateSeckill(ctx context.Context, in *CreateSeckillRequest, opts ...grpc.CallOption) (*CreateSeckillResponse, error)
	// 获取秒杀活动
	GetSeckill(ctx context.Context, in *GetSeckillRequest, opts ...grpc.CallOption) (*GetSeckillResponse, error)
	// 参与秒杀活动
	JoinSeckill(ctx context.Context, in *JoinSeckillRequest, opts ...grpc.CallOption) (*JoinSeckillResponse, error)
	// 查询秒杀状态
	InquireSeckill(ctx context.Context, in *InquireSeckillRequest, opts ...grpc.CallOption) (*InquireSeckillResponse, error)
	// 检查最终秒杀结果
	CheckSeckillResult(ctx context.Context, in *CheckSeckillResultRequest, opts ...grpc.CallOption) (*CheckSeckillResultResponse, error)
}

type seckillServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeckillServiceClient(cc grpc.ClientConnInterface) SeckillServiceClient {
	return &seckillServiceClient{cc}
}

func (c *seckillServiceClient) CreateSeckill(ctx context.Context, in *CreateSeckillRequest, opts ...grpc.CallOption) (*CreateSeckillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSeckillResponse)
	err := c.cc.Invoke(ctx, SeckillService_CreateSeckill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillServiceClient) GetSeckill(ctx context.Context, in *GetSeckillRequest, opts ...grpc.CallOption) (*GetSeckillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeckillResponse)
	err := c.cc.Invoke(ctx, SeckillService_GetSeckill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillServiceClient) JoinSeckill(ctx context.Context, in *JoinSeckillRequest, opts ...grpc.CallOption) (*JoinSeckillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinSeckillResponse)
	err := c.cc.Invoke(ctx, SeckillService_JoinSeckill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillServiceClient) InquireSeckill(ctx context.Context, in *InquireSeckillRequest, opts ...grpc.CallOption) (*InquireSeckillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InquireSeckillResponse)
	err := c.cc.Invoke(ctx, SeckillService_InquireSeckill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillServiceClient) CheckSeckillResult(ctx context.Context, in *CheckSeckillResultRequest, opts ...grpc.CallOption) (*CheckSeckillResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckSeckillResultResponse)
	err := c.cc.Invoke(ctx, SeckillService_CheckSeckillResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeckillServiceServer is the server API for SeckillService service.
// All implementations must embed UnimplementedSeckillServiceServer
// for forward compatibility.
type SeckillServiceServer interface {
	// 创建秒杀活动
	CreateSeckill(context.Context, *CreateSeckillRequest) (*CreateSeckillResponse, error)
	// 获取秒杀活动
	GetSeckill(context.Context, *GetSeckillRequest) (*GetSeckillResponse, error)
	// 参与秒杀活动
	JoinSeckill(context.Context, *JoinSeckillRequest) (*JoinSeckillResponse, error)
	// 查询秒杀状态
	InquireSeckill(context.Context, *InquireSeckillRequest) (*InquireSeckillResponse, error)
	// 检查最终秒杀结果
	CheckSeckillResult(context.Context, *CheckSeckillResultRequest) (*CheckSeckillResultResponse, error)
	mustEmbedUnimplementedSeckillServiceServer()
}

// UnimplementedSeckillServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSeckillServiceServer struct{}

func (UnimplementedSeckillServiceServer) CreateSeckill(context.Context, *CreateSeckillRequest) (*CreateSeckillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeckill not implemented")
}
func (UnimplementedSeckillServiceServer) GetSeckill(context.Context, *GetSeckillRequest) (*GetSeckillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeckill not implemented")
}
func (UnimplementedSeckillServiceServer) JoinSeckill(context.Context, *JoinSeckillRequest) (*JoinSeckillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinSeckill not implemented")
}
func (UnimplementedSeckillServiceServer) InquireSeckill(context.Context, *InquireSeckillRequest) (*InquireSeckillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquireSeckill not implemented")
}
func (UnimplementedSeckillServiceServer) CheckSeckillResult(context.Context, *CheckSeckillResultRequest) (*CheckSeckillResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSeckillResult not implemented")
}
func (UnimplementedSeckillServiceServer) mustEmbedUnimplementedSeckillServiceServer() {}
func (UnimplementedSeckillServiceServer) testEmbeddedByValue()                        {}

// UnsafeSeckillServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeckillServiceServer will
// result in compilation errors.
type UnsafeSeckillServiceServer interface {
	mustEmbedUnimplementedSeckillServiceServer()
}

func RegisterSeckillServiceServer(s grpc.ServiceRegistrar, srv SeckillServiceServer) {
	// If the following call pancis, it indicates UnimplementedSeckillServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SeckillService_ServiceDesc, srv)
}

func _SeckillService_CreateSeckill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeckillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillServiceServer).CreateSeckill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillService_CreateSeckill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillServiceServer).CreateSeckill(ctx, req.(*CreateSeckillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillService_GetSeckill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeckillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillServiceServer).GetSeckill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillService_GetSeckill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillServiceServer).GetSeckill(ctx, req.(*GetSeckillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillService_JoinSeckill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinSeckillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillServiceServer).JoinSeckill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillService_JoinSeckill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillServiceServer).JoinSeckill(ctx, req.(*JoinSeckillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillService_InquireSeckill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InquireSeckillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillServiceServer).InquireSeckill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillService_InquireSeckill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillServiceServer).InquireSeckill(ctx, req.(*InquireSeckillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillService_CheckSeckillResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSeckillResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillServiceServer).CheckSeckillResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillService_CheckSeckillResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillServiceServer).CheckSeckillResult(ctx, req.(*CheckSeckillResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeckillService_ServiceDesc is the grpc.ServiceDesc for SeckillService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeckillService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SeckillService",
	HandlerType: (*SeckillServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSeckill",
			Handler:    _SeckillService_CreateSeckill_Handler,
		},
		{
			MethodName: "GetSeckill",
			Handler:    _SeckillService_GetSeckill_Handler,
		},
		{
			MethodName: "JoinSeckill",
			Handler:    _SeckillService_JoinSeckill_Handler,
		},
		{
			MethodName: "InquireSeckill",
			Handler:    _SeckillService_InquireSeckill_Handler,
		},
		{
			MethodName: "CheckSeckillResult",
			Handler:    _SeckillService_CheckSeckillResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/seckill.proto",
}
